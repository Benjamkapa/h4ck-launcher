C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:51: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
        val subscriptions = subMgr.activeSubscriptionInfoList ?: emptyList()
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "MissingPermission":
   This check scans through your code and libraries and looks at the APIs
   being used, and checks this against the set of permissions required to
   access those APIs. If the code using those APIs is called at runtime, then
   the program will crash.

   Furthermore, for permissions that are revocable (with targetSdkVersion 23),
   client code must also be prepared to handle the calls throwing an exception
   if the user rejects the request for permission at runtime.

C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:48: Warning: Field requires API level 22 (current min is 21): android.content.Context#TELEPHONY_SUBSCRIPTION_SERVICE [InlinedApi]
        val subMgr = context.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager
                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "InlinedApi":
   This check scans through all the Android API field references in the
   application and flags certain constants, such as static final integers and
   Strings, which were introduced in later versions. These will actually be
   copied into the class files rather than being referenced, which means that
   the value is available even when running on older devices. In some cases
   that's fine, and in other cases it can result in a runtime crash or
   incorrect behavior. It depends on the context, so consider the code
   carefully and decide whether it's safe and can be suppressed or whether the
   code needs to be guarded.

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:48: Error: Class requires API level 22 (current min is 21): android.telephony.SubscriptionManager [NewApi]
        val subMgr = context.getSystemService(Context.TELEPHONY_SUBSCRIPTION_SERVICE) as SubscriptionManager
                                                                                         ~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:51: Error: Call requires API level 22 (current min is 21): android.telephony.SubscriptionManager#getActiveSubscriptionInfoList [NewApi]
        val subscriptions = subMgr.activeSubscriptionInfoList ?: emptyList()
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:61: Error: Call requires API level 23 (current min is 21): android.telephony.SignalStrength#getLevel [NewApi]
                    teleMgr.signalStrength?.level ?: 0
                                            ~~~~~
C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:61: Error: Call requires API level 28 (current min is 21): android.telephony.TelephonyManager#getSignalStrength [NewApi]
                    teleMgr.signalStrength?.level ?: 0
                            ~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\FuturisticStatusBarView.kt:63: Error: Call requires API level 22 (current min is 21): android.telephony.SubscriptionInfo#getDisplayName [NewApi]
                addNetworkItem(subInfo.displayName.toString(), signalStrength)
                                       ~~~~~~~~~~~

   Explanation for issues of type "NewApi":
   This check scans through all the Android API calls in the application and
   warns about any calls that are not available on all versions targeted by
   this application (according to its minimum SDK attribute in the manifest).

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

   If you are deliberately setting android: attributes in style definitions,
   make sure you place this in a values-vNN folder in order to avoid running
   into runtime conflicts on certain devices where manufacturers have added
   custom attributes whose ids conflict with the new ones on later platforms.

   Similarly, you can use tools:targetApi="11" in an XML file to indicate that
   the element will only be inflated in an adequate context.

C:\PROJECTS\arc\app\build.gradle:14: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 33
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

C:\PROJECTS\arc\app\src\main\java\com\example\launcher\presentation\splash\SplashActivity.kt:10: Warning: The application should not provide its own launch screen [CustomSplashScreen]
class SplashActivity : AppCompatActivity() {
      ~~~~~~~~~~~~~~

   Explanation for issues of type "CustomSplashScreen":
   Starting in Android 12 (API 31+), the application's Launch Screen is
   provided by the system and the application should not create its own,
   otherwise the user will see two splashscreens. Please check the
   SplashScreen class to check how the Splash Screen can be controlled and
   customized.

   https://developer.android.com/guide/topics/ui/splash-screen

C:\PROJECTS\arc\gradle\wrapper\gradle-wrapper.properties:3: Warning: A newer version of Gradle than 8.12 is available: 8.14.3 [AndroidGradlePluginVersion]
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-bin.zip
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "AndroidGradlePluginVersion":
   This detector looks for usage of the Android Gradle Plugin where the
   version you are using is not the current stable release. Using older
   versions is fine, and there are cases where you deliberately want to stick
   with an older version. However, you may simply not be aware that a more
   recent version is available, and that is what this lint check helps find.

C:\PROJECTS\arc\app\build.gradle:9: Warning: A newer version of compileSdkVersion than 33 is available: 35 [GradleDependency]
    compileSdk 33
    ~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:39: Warning: A newer version of androidx.core:core-ktx than 1.10.1 is available: 1.17.0 [GradleDependency]
    implementation 'androidx.core:core-ktx:1.10.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:40: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.1 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:41: Warning: A newer version of com.google.android.material:material than 1.9.0 is available: 1.13.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.9.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:42: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:44: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.3.0 [GradleDependency]
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:45: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.7.0 [GradleDependency]
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\build.gradle:46: Warning: A newer version of androidx.recyclerview:recyclerview than 1.3.1 is available: 1.4.0 [GradleDependency]
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\MatrixBackgroundView.kt:337: Hint: This initialization lambda ({ 0f }) is unnecessary and is less efficient [UnnecessaryArrayInit]
        xOffsets = FloatArray(numRows) { 0f }
                                       ~~~~~~

   Explanation for issues of type "UnnecessaryArrayInit":
   When constructing an array in Kotlin, you don't need to pass a lambda to
   set the initial value if it's identical to the default or if you're going
   to overwrite all the values without reading them anyway.

C:\PROJECTS\arc\app\src\main\res\layout\app_item.xml:2: Warning: This tag and its children can be replaced by one <TextView/> and a compound drawable [UseCompoundDrawables]
<LinearLayout
 ~~~~~~~~~~~~

   Explanation for issues of type "UseCompoundDrawables":
   A LinearLayout which contains an ImageView and a TextView can be more
   efficiently handled as a compound drawable (a single TextView, using the
   drawableTop, drawableLeft, drawableRight and/or drawableBottom attributes
   to draw one or more images adjacent to the text).

   If the two widgets are offset from each other with margins, this can be
   replaced with a drawablePadding attribute.

   There's a lint quickfix to perform this conversion in the Eclipse plugin.

C:\PROJECTS\arc\app\src\main\res\layout\activity_splash.xml:2: Warning: This <FrameLayout> can be replaced with a <merge> tag [MergeRootFrame]
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
^

   Explanation for issues of type "MergeRootFrame":
   If a <FrameLayout> is the root of a layout and does not provide background
   or padding etc, it can often be replaced with a <merge> tag which is
   slightly more efficient. Note that this depends on context, so make sure
   you understand how the <merge> tag works before proceeding.

   https://android-developers.googleblog.com/2009/03/android-layout-tricks-3-optimize-by.html

C:\PROJECTS\arc\app\src\main\res\layout-v23\activity_home.xml:6: Warning: Possible overdraw: Root element paints background @color/matrix_background with a theme that also paints a background (inferred theme is @style/HomeTheme) [Overdraw]
    android:background="@color/matrix_background"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\res\layout\activity_home.xml:6: Warning: Possible overdraw: Root element paints background @color/matrix_background with a theme that also paints a background (inferred theme is @style/HomeTheme) [Overdraw]
    android:background="@color/matrix_background"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

C:\PROJECTS\arc\app\src\main\res\values\colors.xml:6: Warning: The resource R.color.white appears to be unused [UnusedResources]
    <color name="white">#FFFFFF</color>
           ~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\res\drawable\ic_battery_outline.xml:1: Warning: The resource R.drawable.ic_battery_outline appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^
C:\PROJECTS\arc\app\src\main\res\drawable\network_bar_background.xml:1: Warning: The resource R.drawable.network_bar_background appears to be unused [UnusedResources]
<shape xmlns:android="http://schemas.android.com/apk/res/android"
^

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

C:\PROJECTS\arc\app\src\main\res\mipmap-hdpi\ic_launcher_monochrome.png: Warning: The following unrelated icon files have identical contents: ic_launcher_foreground.png, ic_launcher_monochrome.png [IconDuplicates]
C:\PROJECTS\arc\app\src\main\res\mipmap-mdpi\ic_launcher_monochrome.png: Warning: The following unrelated icon files have identical contents: ic_launcher_foreground.png, ic_launcher_monochrome.png [IconDuplicates]
C:\PROJECTS\arc\app\src\main\res\mipmap-xhdpi\ic_launcher_monochrome.png: Warning: The following unrelated icon files have identical contents: ic_launcher_foreground.png, ic_launcher_monochrome.png [IconDuplicates]
C:\PROJECTS\arc\app\src\main\res\mipmap-xxhdpi\ic_launcher_monochrome.png: Warning: The following unrelated icon files have identical contents: ic_launcher_foreground.png, ic_launcher_monochrome.png [IconDuplicates]
C:\PROJECTS\arc\app\src\main\res\mipmap-xxxhdpi\ic_launcher_monochrome.png: Warning: The following unrelated icon files have identical contents: ic_launcher_foreground.png, ic_launcher_monochrome.png [IconDuplicates]

   Explanation for issues of type "IconDuplicates":
   If an icon is repeated under different names, you can consolidate and just
   use one of the icons and delete the others to make your application
   smaller. However, duplicated icons usually are not intentional and can
   sometimes point to icons that were accidentally overwritten or accidentally
   not updated.

C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\MatrixBackgroundView.kt:303: Warning: Use the KTX extension function String.toColorInt instead? [UseKtx]
        color = Color.parseColor("#066011")
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\PROJECTS\arc\app\src\main\java\com\example\launcher\widgets\MatrixBackgroundView.kt:303: Warning: Use the KTX extension function String.toColorInt instead? [UseKtx]
        color = Color.parseColor("#066011")
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling

   ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than

   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

C:\PROJECTS\arc\app\src\main\res\layout\app_item.xml:11: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
C:\PROJECTS\arc\app\src\main\res\layout\view_network_status_bar.xml:27: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, set their descriptions to
   @null. If your app's minSdkVersion is 16 or higher, you can instead set
   these graphical elements' android:importantForAccessibility attributes to
   no.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

6 errors, 28 warnings, 1 hint
